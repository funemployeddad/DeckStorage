1. form for making a new deck works, it send you to the deck#show page.
  a. on submit, take the resource that would have been created and use it to make the new deck through JS
  b. when that new deck is created, append it to the decks#show div
2. need to make a form for adding cards
  a. on submit, create the new card through JS and append it to the deck_show div

  













1. I want to load(or render?) <div class="decks"> on doc load
  $(function(){
    var $decks = $.get("div.decks");
  $("div.decks").html($decks);
  })

This is the HTML I want to build.
<tr class="table-light">
      <th scope="row"><a class="load_deck" href="/users/1/decks/1">Grixis Control</a></th>
      <td> <a href="/users/1/formats/1">standard</a></td>
      <td> <a class="btn btn-danger" rel="nofollow" data-method="delete" href="/users/1/decks/1"></a> </td>
    </tr>

    This is the code that build this HTML. change this js and utilize js objects instead of these ruby objects to populate the fields for th and td.
    <% @decks.each do |deck| %>
    <tr class="table-light">
      <th scope="row"><%= link_to "#{deck.name}", user_deck_path(@user, deck), class: "load_deck"%></th>
      <td > <%= link_to "#{deck.format.name}", user_format_path(@user, deck.format) %></td>
      <td> <%= link_to("", user_deck_path(@user, deck), method: :delete, class: "btn btn-danger") %> </td>

    <% end %>
  </tr>

2. Need to use a form to render a new resource without refreshing the page
  - hijack the submit action of the form already in use for decks#new
  - look at the ES6 Template Literals for this one

3.  Translate JSON response into JS Model Objects
  - must have at least one method on the prototype. (formatters are a good use of this type of functionality)

  Thoughts:
  $(".button_to) is not specific enough, need to add an id to the one on the card submit page to differentiate from the one on the deck show div
  on second thought, once I get this to add the cards on the show page, I won't need to worry about it being hidden, because it'll be revealed when the deck is shown, which is the only time that it would need to pop up


- take the .button_to out completely and instead have a form that shows up in the div.deck area inside of a child div
- when that form is submitted, add the new card to the db and then append it to the DOM.
- for the new deck form, on submit display that deck in the div.deck, along with the form for adding a new card. need to also allow edit/update/destroy for cards
